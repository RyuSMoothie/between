package AES256Cipher1;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidAlgorithmParameterException;
import java.util.Base64; 
import java.util.Base64.Encoder;



public class AES256Cipher {
	private static volatile AES256Cipher INSTANCE;

    // 여기에 AES키값 들어감
    final static String secretKey = "d817tv4ahb08x6y590s1v114j0dkj381"; //32bit
    // 여기에 IV Value값 들어감
    static String IV = "d817tv4ahb08x6y5"; //16bit
    
    public static AES256Cipher getInstance() {
        if (INSTANCE == null) {
            synchronized (AES256Cipher.class) {
                if (INSTANCE == null)
                    INSTANCE = new AES256Cipher();
            }
        }
        return INSTANCE;
    }
    
    private AES256Cipher() {
        IV = secretKey.substring(0, 16);
    }
    
    //AES256 암호화
    public static String AES_Encode(String str)   throws java.io.UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,     InvalidAlgorithmParameterException,    IllegalBlockSizeException, BadPaddingException {
    	byte[] keyData = secretKey.getBytes();
    	
    	SecretKey secureKey = new SecretKeySpec(keyData, "AES");
    	
    	Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
        c.init(Cipher.ENCRYPT_MODE, secureKey, new IvParameterSpec(IV.getBytes()));

        byte[] encrypted = c.doFinal(str.getBytes("UTF-8"));
        Encoder encoder = Base64.getEncoder();
        String enStr = new String(encoder.encode(encrypted));

        return enStr;
    }


}
